# Generated by Django 3.2.12 on 2022-03-30 04:48

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AuthGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150, unique=True)),
            ],
            options={
                'db_table': 'auth_group',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthGroupPermissions',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'auth_group_permissions',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthPermission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('codename', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'auth_permission',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128)),
                ('last_login', models.DateTimeField(blank=True, null=True)),
                ('is_superuser', models.IntegerField()),
                ('username', models.CharField(max_length=150, unique=True)),
                ('first_name', models.CharField(max_length=150)),
                ('last_name', models.CharField(max_length=150)),
                ('email', models.CharField(max_length=254)),
                ('is_staff', models.IntegerField()),
                ('is_active', models.IntegerField()),
                ('date_joined', models.DateTimeField()),
            ],
            options={
                'db_table': 'auth_user',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthUserGroups',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'auth_user_groups',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthUserUserPermissions',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'auth_user_user_permissions',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoAdminLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action_time', models.DateTimeField()),
                ('object_id', models.TextField(blank=True, null=True)),
                ('object_repr', models.CharField(max_length=200)),
                ('action_flag', models.PositiveSmallIntegerField()),
                ('change_message', models.TextField()),
            ],
            options={
                'db_table': 'django_admin_log',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoContentType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('app_label', models.CharField(max_length=100)),
                ('model', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'django_content_type',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoMigrations',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('app', models.CharField(max_length=255)),
                ('name', models.CharField(max_length=255)),
                ('applied', models.DateTimeField()),
            ],
            options={
                'db_table': 'django_migrations',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoSession',
            fields=[
                ('session_key', models.CharField(max_length=40, primary_key=True, serialize=False)),
                ('session_data', models.TextField()),
                ('expire_date', models.DateTimeField()),
            ],
            options={
                'db_table': 'django_session',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbCategory',
            fields=[
                ('category_seq', models.BigAutoField(primary_key=True, serialize=False)),
                ('category_name', models.CharField(max_length=255, unique=True)),
            ],
            options={
                'db_table': 'tb_category',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbGameInfo',
            fields=[
                ('game_seq', models.BigAutoField(primary_key=True, serialize=False)),
                ('average_forever', models.IntegerField(blank=True, null=True)),
                ('developers', models.CharField(blank=True, max_length=255, null=True)),
                ('game_name', models.CharField(max_length=255)),
                ('header_image', models.CharField(blank=True, max_length=255, null=True)),
                ('is_free', models.TextField()),
                ('languages', models.TextField(blank=True, null=True)),
                ('movies', models.TextField(blank=True, null=True)),
                ('negative', models.BigIntegerField(blank=True, null=True)),
                ('owners_max', models.BigIntegerField(blank=True, null=True)),
                ('owners_min', models.BigIntegerField(blank=True, null=True)),
                ('platforms', models.CharField(blank=True, max_length=255, null=True)),
                ('positive', models.BigIntegerField(blank=True, null=True)),
                ('price', models.IntegerField(blank=True, null=True)),
                ('publisher', models.CharField(blank=True, max_length=255, null=True)),
                ('release_date', models.TextField(blank=True, null=True)),
                ('screenshots', models.TextField(blank=True, null=True)),
                ('short_description', models.TextField(blank=True, null=True)),
                ('short_description_kr', models.TextField(blank=True, null=True)),
                ('steam_appid', models.BigIntegerField(unique=True)),
                ('website', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'db_table': 'tb_game_info',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbGameTag',
            fields=[
                ('game_tag_seq', models.BigAutoField(primary_key=True, serialize=False)),
                ('tag_count', models.BigIntegerField()),
                ('tag_ratio', models.FloatField()),
            ],
            options={
                'db_table': 'tb_game_tag',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbGenre',
            fields=[
                ('genre_seq', models.BigAutoField(primary_key=True, serialize=False)),
                ('genre_name', models.CharField(max_length=255, unique=True)),
                ('genre_name_kr', models.CharField(max_length=255, unique=True)),
            ],
            options={
                'db_table': 'tb_genre',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbMember',
            fields=[
                ('member_seq', models.BigAutoField(primary_key=True, serialize=False)),
                ('avatar_url', models.CharField(max_length=255)),
                ('created_date', models.DateTimeField(blank=True, null=True)),
                ('email', models.CharField(max_length=255, unique=True)),
                ('game_count', models.BigIntegerField()),
                ('is_deleted', models.TextField()),
                ('is_public', models.TextField()),
                ('password', models.CharField(max_length=255)),
                ('ssgame_id', models.CharField(max_length=255, unique=True)),
                ('steam_id', models.CharField(max_length=255, unique=True)),
                ('steam_nickname', models.CharField(max_length=255)),
            ],
            options={
                'db_table': 'tb_member',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbMemberPreferredTag',
            fields=[
                ('member_tag_seq', models.BigAutoField(primary_key=True, serialize=False)),
                ('preferred_tag_ratio', models.FloatField()),
            ],
            options={
                'db_table': 'tb_member_preferred_tag',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbMemberRecommendedGame',
            fields=[
                ('recommended_game_seq', models.BigAutoField(primary_key=True, serialize=False)),
                ('recommended_ratio', models.FloatField()),
            ],
            options={
                'db_table': 'tb_member_recommended_game',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbTag',
            fields=[
                ('tag_seq', models.BigAutoField(primary_key=True, serialize=False)),
                ('tag_name', models.CharField(max_length=255, unique=True)),
                ('tag_name_kr', models.CharField(max_length=255, unique=True)),
            ],
            options={
                'db_table': 'tb_tag',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbGameGenre',
            fields=[
                ('game_seq', models.OneToOneField(db_column='game_seq', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='ssgameapp.tbgameinfo')),
            ],
            options={
                'db_table': 'tb_game_genre',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbMemberFrequentGenre',
            fields=[
                ('genre_seq', models.OneToOneField(db_column='genre_seq', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='ssgameapp.tbgenre')),
                ('genre_count', models.BigIntegerField()),
            ],
            options={
                'db_table': 'tb_member_frequent_genre',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbMemberGameList',
            fields=[
                ('game_seq', models.OneToOneField(db_column='game_seq', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='ssgameapp.tbgameinfo')),
                ('member_game_rating', models.IntegerField(blank=True, null=True)),
                ('member_play_time', models.BigIntegerField()),
            ],
            options={
                'db_table': 'tb_member_game_list',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TbRedarChartInfo',
            fields=[
                ('category_seq', models.OneToOneField(db_column='category_seq', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='ssgameapp.tbcategory')),
                ('category_ratio', models.FloatField()),
            ],
            options={
                'db_table': 'tb_redar_chart_info',
                'managed': False,
            },
        ),
    ]
